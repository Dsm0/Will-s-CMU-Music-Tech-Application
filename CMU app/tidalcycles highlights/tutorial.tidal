import Data.List

main1 filename = do
  let args = filename
  content <- readFile args
  --cLines <- lines content
  --return map (read :: String -> [Float]) (cLines)
  return $ map (read :: String -> [Float]) $ lines content

main2 filename = do
  let args = filename
  content <- readFile args
  --cLines <- lines content
  --return map (read :: String -> [Float]) (cLines)
  return $ lines content
hush

main1 "output.txt"


let loooook = ["[0.0, 21.05263157894737, 450.56721805219945, 450.5625302466032]", "[0.0, 42.10526315789474, 350.6536813941797, 346.7624393708003]"]
let loooook2 = [[0.0, 21.05263157894737, 450.56721805219945, 450.5625302466032], [0.0, 42.10526315789474, 350.6536813941797, 346.7624393708003]]

let b = (loooook2 !! 0)
let a = (loooook !! 0)
b
a

d1 $ s "bd ~ ~ hh hh*<3 1 9?> bd/2" #
d1 $ stut 3 0.2 0.9 $ s "arpy*5" # n "[9 2 5 2 2]"
d1 $ every 2 (# n (-9)) $ stut 3 0.2 0.9 $ s "arpy*5" # n "[9 2 5 2 2]*2"



d1 $ stut 2 (scale 0.1 0.3 sine) 0.2 $ s "bd [hh]*<3 1 9?> bd/2" # speed 8
d1 $ stut 2 (scale 0.1 0.3 sine) 0.2 $ s "<bd bd bd [bd ~ ~ ~ ~ ~ ~bd]>*2"
d3 $ every 2 (# speed "<0.5 0.25>") $ palindrome $ s "[~ 808:1 808:1 [808:1*3 ~ 808:1]] <808:2 ~>"  $ every 8 (# n (slow "<4 8>" "[[c5 e9 g5 c6]*4 [b4 e5 g5 b5]*4]")
solo $ d3
(\_ -> magicCoin) :: Bool -> (Bool -> Bool)

:k delayt


doThis = do
   let args = "[0.0, 21.05263157894737, 450.56721805219945, 450.5625302466032]"
   print $ (read :: String -> [Float]) args

doThis

:k args
